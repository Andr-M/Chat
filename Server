package com.javarush.test.level30.lesson15.big01;// Created on 11.04.2016.

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class Server {
    private static Map<String, Connection> connectionMap = new ConcurrentHashMap<>();

    public static void main(String[] args) {
        try {
            int port = ConsoleHelper.readInt();
            ServerSocket serverSocket = new ServerSocket(port);
            ConsoleHelper.writeMessage("сервер запущен");
            while (true) {
                try {
                    Socket socket = serverSocket.accept();
                    new Handler(socket).start();
                } catch (IOException e) {
                    serverSocket.close();
                    e.printStackTrace();
                    break;
                }
            }
        } catch (IOException e){
            e.printStackTrace();
        }
    }

    public static void sendBroadcastMessage(Message message){
        for (Map.Entry<String, Connection> connections: connectionMap.entrySet()){
            try {
                connections.getValue().send(message);
            } catch (IOException e){
                ConsoleHelper.writeMessage("message was not sent");
            }
        }
    }

    private static class Handler extends Thread{
        private Socket socket;

        public Handler(Socket socket) {
            this.socket = socket;
        }

        private String serverHandshake(Connection connection) throws IOException, ClassNotFoundException{
            String userName;
            while (true) {
                connection.send(new Message(MessageType.NAME_REQUEST));
                Message userReply = connection.receive();
                if (userReply.getType() == MessageType.USER_NAME) {
                    userName = userReply.getData();
                    if (userName != null && !userName.isEmpty() && !connectionMap.containsKey(userName)) {
                        connectionMap.put(userName, connection);
                        connection.send(new Message(MessageType.NAME_ACCEPTED));
                        break;
                    }
                }
            }
            return userName;
        }

        private void sendListOfUsers(Connection connection, String userName) throws IOException{
            for (Map.Entry<String, Connection> connections: connectionMap.entrySet()){
                if (!connections.getKey().equals(userName)) {
                    connection.send(new Message(MessageType.USER_ADDED, connections.getKey()));
                }
            }
        }

        private void serverMainLoop(Connection connection, String userName) throws IOException, ClassNotFoundException{
            while (true) {
                Message message = connection.receive();
                if (message.getType() == MessageType.TEXT) {
                    sendBroadcastMessage(new Message(MessageType.TEXT, userName + ": " + message.getData()));
                } else {
                    ConsoleHelper.writeMessage("error: received message is not a TEXT");
                }
            }
        }

        public void run(){
            ConsoleHelper.writeMessage("established new connection with remote address " + socket.getRemoteSocketAddress());
            String newUser = null;
            try (Connection connection = new Connection(socket)) {
                newUser = serverHandshake(connection);
                sendBroadcastMessage(new Message(MessageType.USER_ADDED, newUser));
                sendListOfUsers(connection, newUser);
                serverMainLoop(connection, newUser);
            }
            catch (Exception e){
                ConsoleHelper.writeMessage("error with remote address " + socket.getRemoteSocketAddress());
            }

            if (newUser != null){
                connectionMap.remove(newUser);
                sendBroadcastMessage(new Message(MessageType.USER_REMOVED, newUser));
            }
            ConsoleHelper.writeMessage("connection with remote address " + socket.getRemoteSocketAddress() + " is closed");
        }

    }
}
